name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Code Quality and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm check

      - name: Linting
        run: pnpm lint

      - name: Unit tests
        run: pnpm test:unit --coverage

      - name: Integration tests
        run: pnpm test:integration
        env:
          # Mock AWS credentials for testing
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1

      - name: Build application
        run: pnpm build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: build/
          retention-days: 7

  # End-to-End Testing
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          # Use test environment
          VITE_APP_ENVIRONMENT: test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Terraform Validation
  terraform:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/

      - name: Terraform Init (Dev)
        run: |
          cd terraform/environments/dev
          terraform init -backend=false

      - name: Terraform Validate (Dev)
        run: |
          cd terraform/environments/dev
          terraform validate

      - name: Terraform Init (Prod)
        run: |
          cd terraform/environments/prod
          terraform init -backend=false

      - name: Terraform Validate (Prod)
        run: |
          cd terraform/environments/prod
          terraform validate

      - name: Run tfsec security scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform/

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, e2e, security, terraform]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy infrastructure
        run: |
          cd terraform/environments/dev
          terraform init
          terraform plan -out=tfplan
          terraform apply tfplan

      - name: Build application
        run: pnpm build
        env:
          VITE_APP_ENVIRONMENT: development
          VITE_AWS_REGION: ${{ vars.AWS_REGION }}
          VITE_AWS_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID_DEV }}
          VITE_AWS_COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID_DEV }}
          VITE_AWS_COGNITO_IDENTITY_POOL_ID: ${{ secrets.COGNITO_IDENTITY_POOL_ID_DEV }}
          VITE_AWS_S3_PAGES_BUCKET: ${{ vars.S3_PAGES_BUCKET_DEV }}
          VITE_AWS_S3_FILES_BUCKET: ${{ vars.S3_FILES_BUCKET_DEV }}
          VITE_AWS_S3_WEBSITE_BUCKET: ${{ vars.S3_WEBSITE_BUCKET_DEV }}

      - name: Deploy to S3
        run: pnpm run deploy:dev

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, e2e, security, terraform]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy infrastructure
        run: |
          cd terraform/environments/prod
          terraform init
          terraform plan -out=tfplan
          terraform apply tfplan

      - name: Build application
        run: pnpm build
        env:
          VITE_APP_ENVIRONMENT: production
          VITE_AWS_REGION: ${{ vars.AWS_REGION }}
          VITE_AWS_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID_PROD }}
          VITE_AWS_COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID_PROD }}
          VITE_AWS_COGNITO_IDENTITY_POOL_ID: ${{ secrets.COGNITO_IDENTITY_POOL_ID_PROD }}
          VITE_AWS_S3_PAGES_BUCKET: ${{ vars.S3_PAGES_BUCKET_PROD }}
          VITE_AWS_S3_FILES_BUCKET: ${{ vars.S3_FILES_BUCKET_PROD }}
          VITE_AWS_S3_WEBSITE_BUCKET: ${{ vars.S3_WEBSITE_BUCKET_PROD }}

      - name: Deploy to S3
        run: pnpm run deploy:prod

      - name: Run smoke tests
        run: pnpm run test:smoke
        env:
          SMOKE_TEST_URL: ${{ vars.PRODUCTION_URL }}

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # Release Management
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, e2e, security, terraform]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Create release archive
        run: |
          tar -czf marks3-${{ github.event.release.tag_name }}.tar.gz \
            build/ \
            terraform/ \
            docs/ \
            scripts/ \
            package.json \
            README.md \
            LICENSE \
            CHANGELOG.md

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./marks3-${{ github.event.release.tag_name }}.tar.gz
          asset_name: marks3-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Update package version
        run: |
          npm version ${{ github.event.release.tag_name }} --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${{ github.event.release.tag_name }}"
          git push

      - name: Notify release
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              text: "🎉 New MarkS3 release: ${{ github.event.release.tag_name }}",
              attachments: [{
                color: 'good',
                fields: [{
                  title: 'Release Notes',
                  value: '${{ github.event.release.body }}',
                  short: false
                }]
              }]
            }